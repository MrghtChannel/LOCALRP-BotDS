require("dotenv").config();
const { PermissionsBitField, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");

module.exports = (client) => {
    console.log("‚úÖ –ú–æ–¥—É–ª—å voice.js –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!");

    const CATEGORY_ID = process.env.CATEGORY_ID;
    const CONTROL_CHANNEL_ID = process.env.CONTROL_CHANNEL_ID;

    let userChannels = new Map();

    client.once("ready", async () => {
        console.log("üé§ Voice Manager –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!");

        try {
            const controlChannel = await client.channels.fetch(CONTROL_CHANNEL_ID);
            await controlChannel.bulkDelete(10);
            await sendControlPanel(controlChannel);
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –∫–µ—Ä—É–≤–∞–Ω–Ω—è:", error);
        }
    });

    async function sendControlPanel(channel) {
        const embed = new EmbedBuilder()
            .setTitle("üéõ –ö–æ–Ω—Ç—Ä–æ–ª—å –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤")
            .setDescription("üé§ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–≤–æ—ó–º –≥–æ–ª–æ—Å–æ–≤–∏–º –∫–∞–Ω–∞–ª–æ–º.")
            .setColor("Blue");

        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder().setCustomId("create_channel").setLabel("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞–Ω–∞–ª").setStyle(ButtonStyle.Success),
            new ButtonBuilder().setCustomId("view_members").setLabel("üë• –£—á–∞—Å–Ω–∏–∫–∏").setStyle(ButtonStyle.Primary),
            new ButtonBuilder().setCustomId("settings").setLabel("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è").setStyle(ButtonStyle.Secondary)
        );

        await channel.send({ embeds: [embed], components: [row] });
    }

    client.on("interactionCreate", async (interaction) => {
        if (!interaction.isButton()) return;
        const { customId, member, guild } = interaction;

        if (customId === "create_channel") {
            if (!member.voice.channel) {
                return interaction.reply({ content: "‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —É –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—ñ!", ephemeral: true });
            }

            if (userChannels.has(member.id)) {
                return interaction.reply({ content: "‚ö†Ô∏è –í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∫–∞–Ω–∞–ª!", ephemeral: true });
            }

            try {
                const voiceChannel = await guild.channels.create({
                    name: `üéôÔ∏è ${member.user.username}'s Channel`,
                    type: 2,
                    parent: CATEGORY_ID,
                    permissionOverwrites: [
                        { id: guild.id, allow: [PermissionsBitField.Flags.Connect, PermissionsBitField.Flags.ViewChannel] },
                        { id: member.id, allow: [PermissionsBitField.Flags.ManageChannels, PermissionsBitField.Flags.MoveMembers] }
                    ]
                });

                userChannels.set(member.id, voiceChannel.id);
                await member.voice.setChannel(voiceChannel);

                return interaction.reply({ content: `‚úÖ –í–∞—à –∫–∞–Ω–∞–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${voiceChannel}`, ephemeral: true });
            } catch (error) {
                console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É:", error);
                return interaction.reply({ content: "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–∞–Ω–∞–ª—É!", ephemeral: true });
            }
        }

        if (customId === "view_members") {
            if (!member.voice.channel) {
                return interaction.reply({ content: "‚ùå –í–∏ –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—ñ!", ephemeral: true });
            }

            if (userChannels.get(member.id) !== member.voice.channel.id) {
                return interaction.reply({ content: "‚ùå –í–∏ –Ω–µ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É!", ephemeral: true });
            }

            const members = member.voice.channel.members.map(m => m.user.username).join(", ") || "–ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤";
            const row = new ActionRowBuilder().addComponents(
                ...member.voice.channel.members.map((m) => {
                    return new ButtonBuilder()
                        .setCustomId(`kick_${m.id}`)
                        .setLabel(`‚ùå –í–∏–∫–∏–Ω—É—Ç–∏ ${m.user.username}`)
                        .setStyle(ButtonStyle.Danger);
                })
            );

            return interaction.reply({
                content: `üë• –£—á–∞—Å–Ω–∏–∫–∏: ${members}`,
                components: row.length ? [row] : [],
                ephemeral: true
            });
        }

        if (customId === "settings") {
            const channelId = userChannels.get(member.id);
            if (!channelId) {
                return interaction.reply({ content: "‚ö†Ô∏è –í–∏ –Ω–µ –≤–ª–∞—Å–Ω–∏–∫ –∂–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É!", ephemeral: true });
            }

            const row = new ActionRowBuilder().addComponents(
                new ButtonBuilder().setCustomId("limit_5").setLabel("üî¢ –õ—ñ–º—ñ—Ç 5").setStyle(ButtonStyle.Primary),
                new ButtonBuilder().setCustomId("limit_10").setLabel("üîü –õ—ñ–º—ñ—Ç 10").setStyle(ButtonStyle.Primary),
                new ButtonBuilder().setCustomId("limit_none").setLabel("üö´ –ë–µ–∑ –ª—ñ–º—ñ—Ç—É").setStyle(ButtonStyle.Secondary)
            );

            return interaction.reply({ content: "üìå –û–±–µ—Ä—ñ—Ç—å –ª—ñ–º—ñ—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤:", components: [row], ephemeral: true });
        }

        if (customId.startsWith("limit_")) {
            const channelId = userChannels.get(member.id);
            if (!channelId) return;

            const voiceChannel = guild.channels.cache.get(channelId);
            if (!voiceChannel) return;

            const limit = customId === "limit_none" ? 0 : parseInt(customId.split("_")[1]);
            await voiceChannel.setUserLimit(limit);
            return interaction.reply({ content: `‚úÖ –õ—ñ–º—ñ—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ **${limit || "–±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å"}**`, ephemeral: true });
        }

        if (customId.startsWith("kick_")) {
            if (userChannels.get(member.id) !== member.voice.channel.id) {
                return interaction.reply({ content: "‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫—ñ–∫–Ω—É—Ç–∏ —É—á–∞—Å–Ω–∏–∫–∞, –±–æ –Ω–µ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É!", ephemeral: true });
            }

            const userToKick = await guild.members.fetch(customId.split("_")[1]);
            if (!userToKick) {
                return interaction.reply({ content: "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", ephemeral: true });
            }

            try {
                await userToKick.voice.disconnect();
                return interaction.reply({ content: `‚úÖ ${userToKick.user.username} –±—É–≤ –≤–∏–∫–∏–Ω—É—Ç–∏–π –∑ –∫–∞–Ω–∞–ª—É.`, ephemeral: true });
            } catch (error) {
                console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫—ñ–∫–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
                return interaction.reply({ content: "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –≤–∏–∫–∏–Ω—É—Ç–∏ —É—á–∞—Å–Ω–∏–∫–∞.", ephemeral: true });
            }
        }
    });

    client.on("voiceStateUpdate", async (oldState, newState) => {
        const channel = oldState.channel;
        if (!channel) return;

        const ownerId = [...userChannels.entries()].find(([_, id]) => id === channel.id)?.[0];
        if (!ownerId) return;

        if (channel.members.size === 0) {
            try {
                await channel.delete();
                userChannels.delete(ownerId);
                console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –ø—É—Å—Ç–∏–π –≥–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª: ${channel.name}`);
            } catch (error) {
                console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É:", error);
            }
        }
    });
};
