const { 
    Client, GatewayIntentBits, EmbedBuilder, ActionRowBuilder, 
    ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle 
} = require('discord.js');
require('dotenv').config();

const client = new Client({ 
    intents: [
        GatewayIntentBits.Guilds, 
        GatewayIntentBits.GuildMessages, 
        GatewayIntentBits.GuildMembers, 
        GatewayIntentBits.MessageContent, 
        GatewayIntentBits.DirectMessages
    ] 
});

module.exports = {
    name: 'support',
    async execute(client) {
        client.once('ready', async () => {
            console.log(`‚úÖ –ú–æ–¥—É–ª—å support.js –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!`);

            const supportChannel = await client.channels.fetch(process.env.SUPPORT_CHANNEL_ID);
            if (supportChannel) {
                const messages = await supportChannel.messages.fetch({ limit: 10 });
                const panelExists = messages.some(msg => msg.embeds.length > 0 && msg.embeds[0].title === 'üõ† –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞');
                
                if (!panelExists) {
                    const embed = new EmbedBuilder()
                        .setTitle('üõ† –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞')
                        .setDescription('üìå –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º —Ç–∞ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –¥–æ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.')
                        .setColor(0x0099ff);

                    const row = new ActionRowBuilder().addComponents(
                        new ButtonBuilder()
                            .setCustomId('open_ticket')
                            .setLabel('üé´ –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É')
                            .setStyle(ButtonStyle.Primary)
                    );

                    await supportChannel.send({ embeds: [embed], components: [row] });
                    console.log('‚úÖ –ü–∞–Ω–µ–ª—å —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞');
                }
            }
        });

        client.on('interactionCreate', async (interaction) => {
            if (interaction.isButton() && interaction.customId === 'open_ticket') {
                console.log(`üìù ${interaction.user.tag} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏`);

                const modal = new ModalBuilder()
                    .setCustomId('ticket_form')
                    .setTitle('üìÑ –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É');

                const titleInput = new TextInputBuilder()
                    .setCustomId('ticket_title')
                    .setLabel('üìå –ù–∞–∑–≤–∞ –ø—Ä–æ–±–ª–µ–º–∏')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true);

                const descInput = new TextInputBuilder()
                    .setCustomId('ticket_desc')
                    .setLabel('üìù –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏')
                    .setStyle(TextInputStyle.Paragraph)
                    .setRequired(true);

                const proofInput = new TextInputBuilder()
                    .setCustomId('ticket_proof')
                    .setLabel('üì∑ –î–æ–∫–∞–∑–∏ (—è–∫—â–æ —î)')
                    .setStyle(TextInputStyle.Paragraph)
                    .setRequired(false);

                modal.addComponents(
                    new ActionRowBuilder().addComponents(titleInput),
                    new ActionRowBuilder().addComponents(descInput),
                    new ActionRowBuilder().addComponents(proofInput)
                );

                await interaction.showModal(modal);
            }

            if (interaction.isModalSubmit() && interaction.customId === 'ticket_form') {
                const title = interaction.fields.getTextInputValue('ticket_title');
                const description = interaction.fields.getTextInputValue('ticket_desc');
                const proof = interaction.fields.getTextInputValue('ticket_proof') || '‚ùå –ù–µ –Ω–∞–¥–∞–Ω–æ';

                const adminChannel = await client.channels.fetch(process.env.ADMIN_CHANNEL_ID);
                if (adminChannel) {
                    const embed = new EmbedBuilder()
                        .setTitle(`üì© –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ ${interaction.user.tag}`)
                        .setDescription(`–ù—ñ–∫–Ω–µ–π–º: <@${interaction.user.id}>`)
                        .addFields(
                            { name: 'üìå –ù–∞–∑–≤–∞', value: title },
                            { name: 'üìù –û–ø–∏—Å', value: description },
                            { name: 'üì∑ –î–æ–∫–∞–∑–∏', value: proof }
                        )
                        .setColor(0xff0000);

                    const row = new ActionRowBuilder().addComponents(
                        new ButtonBuilder()
                            .setCustomId(`reply_${interaction.user.id}`)
                            .setLabel('‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏')
                            .setStyle(ButtonStyle.Success),
                        new ButtonBuilder()
                            .setCustomId(`close_${interaction.user.id}`)
                            .setLabel('üîí –ó–∞–∫—Ä–∏—Ç–∏')
                            .setStyle(ButtonStyle.Danger)
                    );

                    await adminChannel.send({ embeds: [embed], components: [row] });
                }
                await interaction.reply({ content: '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∏.', ephemeral: true });
            }

            if (interaction.isButton() && interaction.customId.startsWith('reply_')) {
                const ticketUserId = interaction.customId.split('_')[1];
                if (interaction.user.id !== process.env.ADMIN_ID) {
                    await interaction.reply({ content: '‚ùå –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!', ephemeral: true });
                    return;
                }

                const modal = new ModalBuilder()
                    .setCustomId(`response_form_${ticketUserId}`)
                    .setTitle('üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞—è–≤–∫—É');

                const responseInput = new TextInputBuilder()
                    .setCustomId('response_message')
                    .setLabel('‚úâÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å')
                    .setStyle(TextInputStyle.Paragraph)
                    .setRequired(true);

                modal.addComponents(new ActionRowBuilder().addComponents(responseInput));
                await interaction.showModal(modal);
            }

            if (interaction.isModalSubmit() && interaction.customId.startsWith('response_form_')) {
                const ticketUserId = interaction.customId.split('_')[2];
                const responseMessage = interaction.fields.getTextInputValue('response_message');
                const user = await client.users.fetch(ticketUserId);

                if (user) {
                    await user.send({ content: `üì© –í–∞—à—É –∑–∞—è–≤–∫—É –±—É–ª–æ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n\n${responseMessage}` });
                }

                await interaction.reply({ content: '‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.', ephemeral: true });
            }

            if (interaction.isButton() && interaction.customId.startsWith('close_')) {
                const message = interaction.message;
                
                const embed = EmbedBuilder.from(message.embeds[0])
                    .setColor(0x808080)
                    .setFooter({ text: 'üîí –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä–∏—Ç–∞' });

                const disabledRow = new ActionRowBuilder().addComponents(
                    new ButtonBuilder()
                        .setCustomId(`reply_${interaction.user.id}`)
                        .setLabel('‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏')
                        .setStyle(ButtonStyle.Success)
                        .setDisabled(true),
                    new ButtonBuilder()
                        .setCustomId(`close_${interaction.user.id}`)
                        .setLabel('üîí –ó–∞–∫—Ä–∏—Ç–∏')
                        .setStyle(ButtonStyle.Danger)
                        .setDisabled(true)
                );

                await interaction.update({ embeds: [embed], components: [disabledRow] });
            }
        });
    }
};
